# ==============================================================
# = Data Source
# ==============================================================
# mysql
# spring.datasource.url=jdbc:mysql://localhost:3306/wishlist?useSSL=true&characterEncoding=UTF-8
# spring.datasource.username = admin
# spring.datasource.password = admin
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# postgre
spring.datasource.platform=  postgres

# ( data.heroku.com )
spring.datasource.url = jdbc:postgresql://exofpffhtazboz:a1ffb2b1e1566b4dc9643cdd288ce53de62b9aed28615eaecbf55ebcca60a430@ec2-54-217-225-16.eu-west-1.compute.amazonaws.com:5432/dc4qcpmfgonncp
spring.datasource.username = exofpffhtazboz
spring.datasource.password = a1ffb2b1e1566b4dc9643cdd288ce53de62b9aed28615eaecbf55ebcca60a430

# spring.datasource.url = jdbc:postgresql://localhost:5432/mvcchat
# spring.datasource.username = postgres
# spring.datasource.password = admin

spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# ==============================================================
# = Tomcat port
# ==============================================================
# server.port = 9090


# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true

# ==============================================================
# = Hibernate ddl auto (create, create-drop, update)
# ==============================================================

# mysql
# spring.jpa.hibernate.ddl-auto = update

# postgre
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto = update

# ==============================================================
# = The SQL dialect makes Hibernate generate better SQL for the chosen database
# ==============================================================
# mysql
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialecta

# postgre
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select name, password, active from account where name=?
spring.queries.roles-query=select u.name, r.role from account u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.name=?

# ==============================================================
# = Initialize the database using resources/data.sql script
# ==============================================================
spring.datasource.initialization-mode=always


# ==============================================================
# = Application Admin
# ==============================================================
admin.username=admin
admin.password=admin


longpoll.timeout = 1000
